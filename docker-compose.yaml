services:
  # Demo App
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: vispyr
      POSTGRES_DB: vispyr_demo
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - demo
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U user -d vispyr_demo']
      interval: 10s
      timeout: 5s
      retries: 5

  server-main:
    build:
      context: ./server_main
      dockerfile: ../Dockerfile
    container_name: server-main
    ports:
      - 3001:3001
    environment:
      - DB_USER=user
      - DB_HOST=postgres
      - DB_NAME=vispyr_demo
      - DB_PASSWORD=vispyr
      - DB_PORT=5432
      - SERVER_EXTERNAL_URL=http://server-external:3002
      - SERVER_INTERNAL_URL=http://server-internal:3003
      - OTEL_SERVICE_NAME=server_main
      - OTEL_RESOURCE_ATTRIBUTES=service.namespace=server_main
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - demo
    restart: unless-stopped

  server-external:
    build:
      context: ./server_external
      dockerfile: ../Dockerfile
    container_name: server-external
    ports:
      - 3002:3002
    networks:
      - demo
    restart: unless-stopped

  server-internal:
    build:
      context: ./server_internal
      dockerfile: ../Dockerfile
    container_name: server-internal
    ports:
      - 3003:3003
    environment:
      - OTEL_SERVICE_NAME=server_internal
      - OTEL_RESOURCE_ATTRIBUTES=service.namespace=server_internal
    networks:
      - demo
    restart: unless-stopped

  client:
    build:
      context: ./client
      dockerfile: ../Dockerfile
    container_name: client
    ports:
      - 5173:5173
    depends_on:
      - server-main
    networks:
      - demo
    restart: unless-stopped

  # Agent
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - 9100:9100
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - demo
    restart: unless-stopped

  agent-collector:
    image: grafana/alloy:latest
    container_name: alloy
    volumes:
      - ./server_main/vispyr_agent/config.alloy:/etc/alloy/config.alloy
    ports:
      - 4317:4317
      - 9999:9999
    command:
      - run
      - /etc/alloy/config.alloy
      - --server.http.listen-addr=0.0.0.0:12345
    depends_on:
      - node-exporter
    networks:
      - demo
    restart: unless-stopped

  # Backend
  init:
    image: &tempoImage grafana/tempo
    user: root
    entrypoint:
      - 'chown'
      - '10001:10001'
      - '/var/tempo'
    volumes:
      - ./vispyr_backend/tempo/data:/var/tempo

  tempo:
    image: *tempoImage
    command: ['-config.file=/etc/tempo.yaml']
    container_name: tempo
    networks:
      - demo
    volumes:
      - ./vispyr_backend/tempo/tempo.yaml:/etc/tempo.yaml
      - ./vispyr_backend/tempo/data:/var/tempo
    ports:
      - 3200:3200
    depends_on:
      - init

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    networks:
      - demo
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --web.enable-remote-write-receiver

  pyroscope:
    image: grafana/pyroscope
    container_name: pyroscope
    volumes:
      - ./vispyr_backend/pyroscope/pyro-config.yaml:/etc/pyro-config.yaml
    command:
      - -config.file=/etc/pyro-config.yaml
    networks:
      - demo
    ports:
      - 4040:4040

  gateway-collector:
    image: grafana/alloy
    container_name: gateway-collector
    networks:
      - demo
    volumes:
      - ./vispyr_backend/alloy/gateway-config.alloy:/etc/alloy/config.alloy
    ports:
      - 9090:9090
      - 12345:12345
    command:
      - run
      - /etc/alloy/config.alloy
      - --server.http.listen-addr=0.0.0.0:12345
    depends_on:
      - tempo
      - pyroscope
      - prometheus

  grafana:
    image: grafana/grafana
    container_name: grafana
    networks:
      - demo
    volumes:
      - ./vispyr_backend/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./vispyr_backend/grafana/dashboards:/var/lib/grafana/dashboards
      - ./vispyr_backend/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - 3000:3000
    depends_on:
      - prometheus
      - tempo
      - pyroscope

networks:
  demo:
    driver: bridge

volumes:
  postgres_data:
