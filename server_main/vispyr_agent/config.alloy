// Receivers
otelcol.receiver.otlp "default" {
  grpc {
    endpoint = "0.0.0.0:4317"
  }

  output {
    traces = [ otelcol.connector.spanmetrics.default.input, otelcol.processor.batch.sdk_telemetry.input]
    metrics = [otelcol.processor.batch.sdk_telemetry.input]
  }
}

prometheus.scrape "node_metrics" {
  targets = [{ __address__ = "node-exporter:9100" }]
  forward_to = [prometheus.remote_write.gateway_collector.receiver]
  scrape_interval = "15s"
}

pyroscope.receive_http "profiles_sdk" {
  http {
    listen_address = "0.0.0.0"
    listen_port = 9999
  }

  forward_to = [pyroscope.write.gateway_collector.receiver]
}

// Processors
otelcol.processor.batch "sdk_telemetry" {
  output {
    traces = [otelcol.exporter.otlp.gateway_collector.input]
    metrics = [otelcol.exporter.otlp.gateway_collector.input]
  }
}

otelcol.connector.spanmetrics "default" {
  dimension {
    name = "http.method"
    default = "GET"
  }
  dimension {
    name = "http.target"
  }
  histogram {
    explicit {
      buckets = ["50ms", "100ms", "250ms", "1s", "5s", "10s"]
    }
  }
  metrics_flush_interval = "15s"
  namespace = "traces.spanmetrics"
  output {
    metrics = [otelcol.processor.batch.sdk_telemetry.input]
  }
}

// Exporters
prometheus.remote_write "gateway_collector" {
  endpoint {
    url = "http://gateway-collector:9090/api/v1/metrics/write"
  }
}

otelcol.exporter.otlp "gateway_collector" {
  client {
    endpoint = "gateway-collector:4317"
    tls {
      insecure = true
      insecure_skip_verify = true
    }
  }
}

pyroscope.write "gateway_collector" {
  endpoint {
    url = "http://gateway-collector:9999"
  }
}

livedebugging {
  enabled = true
}
